#!/usr/bin/env bash 

  set +e
#  set -x

SHOW_DEBUG_INFO=0

_trim() {
 local s=$(echo -e "${1}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
 echo "$s"
}

_abs_path() {
  local path=${1:-"./"}
  local opt=${2:-"-m"}
  local s=$(readlink $opt "$path")
  echo "$s"
}

_parse_service_method(){
  local SaveIFS=$IFS
  IFS="_"
  local -a name=($1)
  IFS=$SaveIFS
  echo "${name[$2]}"
}

_get_service_name(){
  local name=$(_parse_service_method "$1" 0)
  if [ -z "$name" ]; then 
    echo -e "Error!!!\nCheck service name in name '$name'."
    exit 1
  fi
  echo "$name"
}

_get_method_name(){
  local name=$(_parse_service_method "$1" 1)
  if [ "$name" != 'mnt'  \
    -a "$name" != 'umnt' \
    -a "$name" != 'ln'   \
    -a "$name" != 'uln'  \
    -a "$name" != 'status' ]; then
    echo -e "Error!!!\nCheck name method in name '$name'.\nAfter sign '_' must be 'mnt, umnt, ln, uln, status'"
    exit 1
  fi
  echo "$name"
}

_check_cfg() {
  local cfg=$1
  local src=$2
  local dst=$3
  local expandPath=${4:-0}

  if [ ! -e "$cfg" ]; then 
    [ "$SHOW_DEBUG_INFO" != 0 ] && printf 'Create file %s\n' "$cfg"
    if [ "$src" = '' -o "$dst" = '' ]; then
      echo "Warning!!!Check source and destination. One of then is empty path"
      touch "$cfg"
    else
      echo "$src | $dst" >"$cfg"
    fi
  fi

  if [ -z "$cfg" ]; then 
    echo -e "Error!!!\nCheck config config filename:'$cfg'"
    exit 1
  fi

  if [ ! -e "$cfg" ]; then 
    echo -e "Error!!!\nCannot find config file: '$cfg'"
    exit 1
  fi

  if [ ! -s "$cfg" ]; then
    echo -e "Error!!!\nEmpty config file: '$cfg'"
    exit 1
  fi
}

_check_comment_src_dst() {
  local src=$1
  local dst=$2


  if ! [ $( echo "$src" | sed -r '/^\s*#/d') -o $( echo "$dst" | sed -r '/^\s*#/d') ]; 
  then
    echo -e "Skip processing paths from config:\nSRC: $src\nDST: $dst"
    echo
    return 1
  fi 
  echo -e "Try processing paths from config:\nSRC: $src\nDST: $dst"
  return 0
}

_mount_bind() {
  local src=${1:-}
  local dst=${2:-}
  [ ! -d "$dst" ] && mkdir -p "$dst"
  
  [ "$SHOW_DEBUG_INFO" != 0 ] && printf 'Mount %s -> %s\n' "$src" "$dst"

  local mask=$(_trim "$src on $dst")
  local status=$(_trim $(mount | grep -F "$mask "))
  if [ "$status" == '' ]; then
    [ "$SHOW_DEBUG_INFO" != 0 ] && echo "sudo mount --bind '$src' '$dst'"
    sudo mount --bind "$src" "$dst"
  fi
  mount | grep -F "$src"
#  mount | grep "$dst"
}

_umount_bind() {
  local src=${1:-}

  [ "$SHOW_DEBUG_INFO" != 0 ] && printf 'Unmount %s\n' "$src"

  local mask=$(_trim "$src on")
  local status=$(_trim $(mount | grep -F "$mask "))
  if [ "$status" != '' ]; then
    sudo umount "$src"
  fi
}

_status() {
  local cfg=$1
  local show_ok=${2:-1}
  
  local src=
  local dst=
  local status=

  local SaveIFS=$IFS
  while IFS='|' read -r src dst
  do
    src=$(_trim "$src")
    dst=$(_trim "$dst")
    
    _check_comment_src_dst "$src" "$dst"
    [ $? -ne 0 ] && continue

    status=$(mount | grep -F "$src")
    if [ "$status" != '' -a "$show_ok" ]; then
      [ "$show_ok" != '0' ] && echo -e "Mounted:\n$status"
    else
      echo -e "Unmounted:\n'$src'"
    fi
  done <"$cfg"
  IFS=$SaveIFS
}

_mnt() {
  local cfg=$1

  local src=
  local dst=

  local SaveIFS=$IFS
  while IFS='|' read -r src dst
  do
    src=$(_trim "$src")
    dst=$(_trim "$dst")
    
    _check_comment_src_dst "$src" "$dst"
    [ $? -ne 0 ] && continue

    echo -e "Try mount: '$src'"
    if [ -e "$src" ]; then
      _mount_bind "$src" "$dst"
    fi
  done <"$cfg"
  IFS=$SaveIFS
  _status "$cfg" 0
}

_umnt() {
  local cfg=$1

  local src=
  local dst=

  local SaveIFS=$IFS
  while IFS='|' read -r src dst
  do
    src=$(_trim "$src")
    dst=$(_trim "$dst")
    
    _check_comment_src_dst "$src" "$dst"
    [ $? -ne 0 ] && continue

    echo -e "Try umount:\n$src on $dst"
    if [ -e "$src" ]; then
      _umount_bind "$src" 1
    fi
  done <"$cfg"
  IFS=$SaveIFS
  _status "$cfg" 1
}


_ln() {
  local cfg=$1

  local src=
  local dst=

  local SaveIFS=$IFS
  while IFS='|' read -r src dst
  do
    src=$(_trim "$src")
    dst=$(_trim "$dst")
    
    _check_comment_src_dst "$src" "$dst"
    [ $? -ne 0 ] && continue

    if [ "$src" != '' -a "$dst" != '' ]; then
      echo -e "Try create link\nSrc: $src\nDst: $dst"
      if [ -e "$dst" ]; then
        local dst_path=$(_abs_path "$dst")
        echo -e "Warning!!!\nLink already exists"
      else
        [ "$SHOW_DEBUG_INFO" != 0 ] && echo -e "ln -s '$src' '$dst'"
        ln -s "$src" "$dst"
      fi
      echo
    fi
  done <"$cfg"
  IFS=$SaveIFS
}

_uln() {
  local cfg=$1

  local src=
  local dst=
  local status=
  
  local SaveIFS=$IFS
  while IFS='|' read -r src dst
  do
    src=$(_trim "$src")
    dst=$(_trim "$dst")
    
    _check_comment_src_dst "$src" "$dst"
    [ $? -ne 0 ] && continue

    if [ "$src" != '' -a "$dst" != '' -a -e "$dst" ]; then
      local dst_path=$(_abs_path "$dst")
      echo -e "Try remove link\nLink: $dst\nTo: $dst_path"
      if [ -h "$dst" ]; then
        [ "$SHOW_DEBUG_INFO" != 0 ] && echo -e "rm '$dst'"
        rm "$dst"
      else
        echo -e "Warning!!!\nIt is not link. Check mannually."
      fi
      echo
    fi
  done <"$cfg"
  IFS=$SaveIFS
}


##################################################

start_mnt_common() {

#  clear
#  set -e
#  set -x

  [ $# -lt 2 ] && return 0

  if [ "$SHOW_DEBUG_INFO" != 0 ]; then 
    set -x
  fi
  
  local SERVICE_METHOD=$1
  local CFG_DIR=${2:-.}
  local SRC_DIR=$3
  local DST_DIR=$4

  SHOW_DEBUG_INFO=${5:-$SHOW_DEBUG_INFO}

  SERVICE_NAME=$(_get_service_name $SERVICE_METHOD)
  METHOD_NAME=$(_get_method_name $SERVICE_METHOD)
  CFG_FILE="$CFG_DIR/$SERVICE_NAME.cfg"
  
# if [ "$METHOD_NAME" = 'ln' ]; then
    SRC_DIR=$(_abs_path "$SRC_DIR")
#  fi

  echo "Service name: $SERVICE_NAME"
  echo "Method  name: $METHOD_NAME"
  echo "SRC dir: $SRC_DIR"
  echo "DST dir: $DST_DIR"
  echo "CFG File: $CFG_FILE"
  echo 

  _check_cfg "$CFG_FILE" "$SRC_DIR" "$DST_DIR"
  _${METHOD_NAME} "$CFG_FILE"

}

get_script() {
  echo '#!/usr/bin/env bash

####################################
###     Set correct directory    ###
####################################
CFG_DIR="."
SRC_DIR="./src"
DST_DIR="./dst"

####################################
### Do not edit code the  bellow ###
####################################
#set -x
SHOW_DEBUG=0
MNT_COMMON=$(which mnt_common)
if [ -z "$MNT_COMMON" ]; then
  echo -e "Error!!!\nCheck path to mnt_common program."
  exit 1
fi

source "$MNT_COMMON"

SERVICE_METHOD=$(basename "$0")
SERVICE_NAME=$(_get_service_name $SERVICE_METHOD)
SRC_DIR=$(_abs_path "$SRC_DIR")
DST_DIR=$(_abs_path "$DST_DIR")
#CFG_DIR=$(_abs_path "$CFG_DIR")
start_mnt_common "$SERVICE_METHOD" "$CFG_DIR" "$SRC_DIR" "$DST_DIR" $SHOW_DEBUG
'
}

_main() {
  local p1=$(_trim "$1")
  if [ "$p1" = '-h' -o "$p1" = '--help' ]; then
      get_script  
  else
    start_mnt_common $@
  fi
}

if [ ! -z "$0" ]; then 
  _main $@
fi
